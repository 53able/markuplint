/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type PermittedContent =
	| PermittedContentRequire
	| PermittedContentOptional
	| PermittedContentOneOrMore
	| PermittedContentZeroOrMore
	| PermittedContentChoice
	| PermittedContentInterleave;
export type Target = ContentType | ContentType[];
export type ContentType = string | Category;
export type Category =
	| '#text'
	| '#phrasing'
	| '#flow'
	| '#interactive'
	| '#heading'
	| '#sectioning'
	| '#metadata'
	| '#transparent'
	| '#embedded'
	| '#palpable'
	| '#script-supporting'
	| '#SVGAnimation'
	| '#SVGBasicShapes'
	| '#SVGContainer'
	| '#SVGDescriptive'
	| '#SVGFilterPrimitive'
	| '#SVGFont'
	| '#SVGGradient'
	| '#SVGGraphics'
	| '#SVGGraphicsReferencing'
	| '#SVGLightSource'
	| '#SVGNeverRendered'
	| '#SVGNone'
	| '#SVGPaintServer'
	| '#SVGRenderable'
	| '#SVGShape'
	| '#SVGStructural'
	| '#SVGStructurallyExternal'
	| '#SVGTextContent'
	| '#SVGTextContentChild'
	| '#SVGOtherXMLNamespace';
export type PermittedContentSpec = PermittedContent[];

export interface ContentModelsSchema {
	__contentModel?: ContentModel;
}
export interface ContentModel {
	contents: PermittedContentSpec | boolean;
	descendantOf?: string;
	conditional?: {
		condition: string;
		contents: PermittedContentSpec | boolean;
	}[];
}
export interface PermittedContentRequire {
	require: Target;
	ignore?: Target;
	notAllowedDescendants?: ContentType[];
	max?: number;
	min?: number;
	_TODO_?: string;
}
export interface PermittedContentOptional {
	optional: Target;
	ignore?: Target;
	notAllowedDescendants?: ContentType[];
	max?: number;
	_TODO_?: string;
}
export interface PermittedContentOneOrMore {
	oneOrMore: Target | PermittedContentSpec;
	ignore?: Target;
	notAllowedDescendants?: ContentType[];
	max?: number;
	_TODO_?: string;
}
export interface PermittedContentZeroOrMore {
	zeroOrMore: Target | PermittedContentSpec;
	ignore?: Target;
	notAllowedDescendants?: ContentType[];
	max?: number;
	_TODO_?: string;
}
export interface PermittedContentChoice {
	choice:
		| [PermittedContentSpec, PermittedContentSpec]
		| [PermittedContentSpec, PermittedContentSpec, PermittedContentSpec]
		| [PermittedContentSpec, PermittedContentSpec, PermittedContentSpec, PermittedContentSpec]
		| [
				PermittedContentSpec,
				PermittedContentSpec,
				PermittedContentSpec,
				PermittedContentSpec,
				PermittedContentSpec,
		  ];
	_TODO_?: string;
}
export interface PermittedContentInterleave {
	interleave: [PermittedContentSpec, PermittedContentSpec, ...PermittedContentSpec[]];
	_TODO_?: string;
}
